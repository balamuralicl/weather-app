name: Deploy Weather App

on:
  push:
    branches:
      - main
      - dev
      - 'feature/**'

jobs:
  deploy-dev:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Deploy to Dev EC2
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set ENV variables
        run: |
          echo "APP_VERSION=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to Dev EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            docker stop weather-api || true && docker rm weather-api || true
            docker run -d --name weather-api \
              -e API_KEY=${{ secrets.API_KEY }} \
              -e APP_VERSION=${APP_VERSION} \
              -e ENVIRONMENT=${ENVIRONMENT} \
              -p 8000:8000 weather-api:latest
          EOF

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Deploy to Prod EC2
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set ENV variables
        run: |
          echo "APP_VERSION=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to Prod EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            docker stop weather-api || true && docker rm weather-api || true
            docker run -d --name weather-api \
              -e API_KEY=${{ secrets.API_KEY }} \
              -e APP_VERSION=${APP_VERSION} \
              -e ENVIRONMENT=${ENVIRONMENT} \
              -p 8000:8000 weather-api:latest
          EOF
